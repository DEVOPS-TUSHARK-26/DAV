import pandas as pd
import matplotlib.pyplot as plt

# load time series data
data = pd.read_csv('data.csv', index_col='Date', parse_dates=True)

# visualize the time series data
plt.plot(data.index, data['Value'])
plt.xlabel('Date')
plt.ylabel('Value')
plt.show()

# calculate and plot rolling statistics
rolling_mean = data['Value'].rolling(window=12).mean()
rolling_std = data['Value'].rolling(window=12).std()
plt.plot(data.index, data['Value'], label='Original')
plt.plot(rolling_mean.index, rolling_mean, label='Rolling Mean')
plt.plot(rolling_std.index, rolling_std, label='Rolling Std')
plt.legend()
plt.show()

# perform Dickey-Fuller test for stationarity
from statsmodels.tsa.stattools import adfuller

def test_stationarity(timeseries):
    # calculate rolling statistics
    rolling_mean = timeseries.rolling(window=12).mean()
    rolling_std = timeseries.rolling(window=12).std()
    
    # plot rolling statistics
    plt.plot(timeseries.index, timeseries, label='Original')
    plt.plot(rolling_mean.index, rolling_mean, label='Rolling Mean')
    plt.plot(rolling_std.index, rolling_std, label='Rolling Std')
    plt.legend()
    plt.show()
    
    # perform Dickey-Fuller test
    print('Results of Dickey-Fuller Test:')
    df_test = adfuller(timeseries, autolag='AIC')
    df_output = pd.Series(df_test[0:4], index=['Test Statistic','p-value','#Lags Used','Number of Observations Used'])
    for key,value in df_test[4].items():
        df_output['Critical Value (%s)'%key] = value
    print(df_output)

# test stationarity of time series
test_stationarity(data['Value'])

# perform differencing to achieve stationarity
